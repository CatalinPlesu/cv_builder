<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="bg-white shadow-xl rounded-lg overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">
        <h1 class="text-2xl font-bold text-white">Edit CV Information</h1>
        <p class="text-blue-100 mt-1">Update your contact details and social links</p>
      </div>

      <%= form_with url: cv_headings_path, method: :patch, local: true, id: "cv-edit-form", class: "p-6 space-y-6" do |form| %>

        <!-- Full Name Field -->
        <div class="bg-gray-50 rounded-lg p-4">
          <%= form.label :full_name, "Full Name", class: "block text-sm font-semibold text-gray-800 mb-2" %>
          <%= form.text_field :full_name, value: @full_name, 
              class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" %>
        </div>

        <!-- Info Box -->
        <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <i class="fas fa-info-circle text-blue-600 mt-0.5"></i>
            </div>
            <div class="ml-3">
              <p class="text-sm text-blue-800 font-medium">Font Awesome Icons</p>
              <p class="text-xs text-blue-600 mt-1">Use icon names like: mobile, envelope, linkedin, github, globe, etc.</p>
            </div>
          </div>
        </div>

        <!-- Contact Items Section -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-800">Contact Information</h3>
            <button type="button"
                    id="add-item-button"
                    class="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200">
              <i class="fas fa-plus mr-2"></i>
              Add Item
            </button>
          </div>

          <!-- Items Container -->
          <div id="heading-items-container" class="space-y-3">
            <% @heading_items.each_with_index do |item, index| %>
              <div class="item-row bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200" data-index="<%= index %>">
                <div class="flex items-center space-x-4">
                  <!-- Drag Handle -->
                  <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 p-2 rounded-md hover:bg-gray-100 transition-colors duration-200">
                    <i class="fas fa-grip-vertical text-lg"></i>
                  </div>

                  <!-- Icon Input -->
                  <div class="flex-shrink-0 w-32">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Icon</label>
                    <%= form.text_field "heading_items[][icon]",
                                        value: item[:icon],
                                        placeholder: "envelope",
                                        class: "icon-input w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent" %>
                  </div>

                  <!-- Icon Preview -->
                  <div class="flex-shrink-0 w-16">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Preview</label>
                    <div class="icon-preview-cell flex items-center justify-center h-10 bg-gray-50 rounded-md border">
                      <% icon_name = item[:icon].to_s.underscore.dasherize %>
                      <span class="icon-preview text-lg text-gray-600">
                        <i class="fas fa-<%= icon_name %>"></i>
                        <i class="fab fa-<%= icon_name %>"></i>
                      </span>
                    </div>
                  </div>

                  <!-- Text Input -->
                  <div class="flex-1">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Display Text</label>
                    <%= form.text_field "heading_items[][text]",
                                        value: item[:text],
                                        placeholder: "john@example.com",
                                        class: "w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent" %>
                  </div>

                  <!-- URL Input -->
                  <div class="flex-1">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Link (Optional)</label>
                    <%= form.url_field "heading_items[][url]",
                                       value: item[:url].presence || '',
                                       placeholder: "https://...",
                                       class: "w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent" %>
                  </div>

                  <!-- Remove Button -->
                  <div class="flex-shrink-0">
                    <label class="block text-xs font-medium text-transparent mb-1">Remove</label>
                    <button type="button"
                            class="remove-item-button p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors duration-200"
                            title="Remove this item">
                      <i class="fas fa-trash text-lg"></i>
                    </button>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200">
          <%= form.submit "Update CV",
                          class: "flex-1 sm:flex-initial px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 cursor-pointer" %>
          <%= link_to "Cancel",
                      root_path,
                      class: "flex-1 sm:flex-initial px-6 py-3 bg-gray-500 text-white font-medium rounded-lg hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors duration-200 text-center" %>
        </div>

      <% end %>
    </div>
  </div>
</div>

<%= javascript_tag do %>
document.addEventListener("turbo:load", function() {
  const container = document.getElementById('heading-items-container');
  const addButton = document.getElementById('add-item-button');

  if (!container || !addButton) return;

  // Helper functions for string manipulation
  if (typeof String.prototype.underscore !== 'function') {
    String.prototype.underscore = function() {
      return this.replace(/([A-Z])/g, '_$1').toLowerCase().replace(/^_/, '');
    };
  }
  if (typeof String.prototype.dasherize !== 'function') {
    String.prototype.dasherize = function() {
      return this.replace(/_/g, '-');
    };
  }

  const CvEdit = {
    // Add new item
    addItem() {
      const currentIndex = container.children.length;
      const newRow = document.createElement('div');
      newRow.className = 'item-row bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200';
      newRow.dataset.index = currentIndex;
      newRow.innerHTML = `
        <div class="flex items-center space-x-4">
          <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 p-2 rounded-md hover:bg-gray-100 transition-colors duration-200">
            <i class="fas fa-grip-vertical text-lg"></i>
          </div>
          <div class="flex-shrink-0 w-32">
            <label class="block text-xs font-medium text-gray-700 mb-1">Icon</label>
            <input type="text" name="heading_items[][icon]" value="" placeholder="envelope" 
                   class="icon-input w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-shrink-0 w-16">
            <label class="block text-xs font-medium text-gray-700 mb-1">Preview</label>
            <div class="icon-preview-cell flex items-center justify-center h-10 bg-gray-50 rounded-md border">
              <span class="icon-preview text-lg text-gray-600"></span>
            </div>
          </div>
          <div class="flex-1">
            <label class="block text-xs font-medium text-gray-700 mb-1">Display Text</label>
            <input type="text" name="heading_items[][text]" value="" placeholder="john@example.com" 
                   class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-1">
            <label class="block text-xs font-medium text-gray-700 mb-1">Link (Optional)</label>
            <input type="url" name="heading_items[][url]" value="" placeholder="https://..." 
                   class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-shrink-0">
            <label class="block text-xs font-medium text-transparent mb-1">Remove</label>
            <button type="button" class="remove-item-button p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors duration-200" title="Remove this item">
              <i class="fas fa-trash text-lg"></i>
            </button>
          </div>
        </div>
      `;
      
      // Add with animation
      newRow.style.opacity = '0';
      newRow.style.transform = 'translateY(-10px)';
      container.appendChild(newRow);
      
      // Trigger animation
      requestAnimationFrame(() => {
        newRow.style.transition = 'all 0.3s ease-out';
        newRow.style.opacity = '1';
        newRow.style.transform = 'translateY(0)';
      });
      
      this.updateRowIndexes();
    },

    // Remove item
    removeItem(event) {
      const button = event.target.closest('.remove-item-button');
      const row = button.closest('.item-row');
      
      if (row && container.children.length > 1) {
        // Animate removal
        row.style.transition = 'all 0.3s ease-out';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';
        
        setTimeout(() => {
          row.remove();
          this.updateRowIndexes();
        }, 300);
      } else if (container.children.length <= 1) {
        this.showMessage("Cannot remove the last item.", 'warning');
      }
    },

    // Update icon preview
    updatePreview(event) {
      const input = event.target;
      const row = input.closest('.item-row');
      const previewSpan = row.querySelector('.icon-preview');
      
      if (previewSpan) {
        const iconName = input.value.trim().underscore().dasherize();
        if (iconName) {
          previewSpan.innerHTML = `<i class="fas fa-${iconName}"></i><i class="fab fa-${iconName}"></i>`;
        } else {
          previewSpan.innerHTML = '';
        }
      }
    },

    // Update row indexes
    updateRowIndexes() {
      const rows = container.querySelectorAll('.item-row');
      rows.forEach((row, index) => {
        row.dataset.index = index;
      });
    },

    // Simple drag and drop implementation
    initDragAndDrop() {
      let draggedElement = null;
      let draggedIndex = null;

      container.addEventListener('mousedown', (e) => {
        if (e.target.closest('.drag-handle')) {
          draggedElement = e.target.closest('.item-row');
          draggedIndex = Array.from(container.children).indexOf(draggedElement);
          draggedElement.style.opacity = '0.5';
          draggedElement.style.transform = 'rotate(2deg)';
          document.body.style.cursor = 'grabbing';
        }
      });

      container.addEventListener('mouseover', (e) => {
        if (draggedElement && e.target.closest('.item-row') && e.target.closest('.item-row') !== draggedElement) {
          const targetElement = e.target.closest('.item-row');
          const targetIndex = Array.from(container.children).indexOf(targetElement);
          
          if (targetIndex !== draggedIndex) {
            if (targetIndex < draggedIndex) {
              container.insertBefore(draggedElement, targetElement);
            } else {
              container.insertBefore(draggedElement, targetElement.nextSibling);
            }
            draggedIndex = Array.from(container.children).indexOf(draggedElement);
          }
        }
      });

      document.addEventListener('mouseup', () => {
        if (draggedElement) {
          draggedElement.style.opacity = '';
          draggedElement.style.transform = '';
          document.body.style.cursor = '';
          draggedElement = null;
          draggedIndex = null;
          this.updateRowIndexes();
        }
      });
    },

    // Show message helper
    showMessage(text, type = 'info') {
      const message = document.createElement('div');
      message.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 transition-all duration-300 ${
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
      }`;
      message.textContent = text;
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.style.opacity = '0';
        message.style.transform = 'translateY(-20px)';
        setTimeout(() => message.remove(), 300);
      }, 3000);
    }
  };

  // Event listeners
  addButton.addEventListener('click', () => CvEdit.addItem());

  // Event delegation
  container.addEventListener('click', function(event) {
    if (event.target.closest('.remove-item-button')) {
      CvEdit.removeItem(event);
    }
  });

  container.addEventListener('input', function(event) {
    if (event.target.classList.contains('icon-input')) {
      CvEdit.updatePreview(event);
    }
  });

  // Initialize drag and drop
  CvEdit.initDragAndDrop();
});
<% end %>
