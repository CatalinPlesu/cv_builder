<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="bg-white shadow-xl rounded-lg overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">
        <h1 class="text-2xl font-bold text-white">Edit CV Information</h1>
        <p class="text-blue-100 mt-1">Update your contact details and social links</p>
      </div>

      <%= form_with(model: @cv_heading, url: upsert_cv_headings_path, method: :put, local: true, html: { id: "cv-edit-form", class: "p-6 space-y-6" }) do |form| %>
        <!-- Full Name Field -->
        <div class="bg-gray-50 rounded-lg p-4">
          <label for="full_name" class="block text-sm font-semibold text-gray-800 mb-2">Full Name</label>
          <%= form.text_field :full_name, 
                              class: "w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" %>
        </div>

        <!-- Info Box -->
        <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <i class="fas fa-info-circle text-blue-600 mt-0.5"></i>
            </div>
            <div class="ml-3">
              <p class="text-sm text-blue-800 font-medium">Font Awesome Icons</p>
              <p class="text-xs text-blue-600 mt-1">
                Icon names can be found at
                <%= link_to "https://fontawesome.com/icons  ", "https://fontawesome.com/icons  ", 
                            class: "text-blue-600 hover:text-blue-800 hover:underline font-medium", 
                            target: "_blank" %>.
                PDFLaTeX uses icons from <%= link_to "this document", "https://mirrors.ibiblio.org/CTAN/fonts/fontawesome/doc/fontawesome.pdf  ", 
                                           class: "text-blue-600 hover:text-blue-800 hover:underline font-medium", 
                                           target: "_blank" %>.
              </p>
            </div>
          </div>
        </div>

        <!-- Contact Items Section -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-800">Contact Information</h3>
          </div>

          <!-- Items Container -->
          <div id="heading-items-container" class="space-y-3">
            <% @heading_items.each_with_index do |item, index| %>
              <div class="item-row bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200" data-position="<%= index + 1 %>">
                <div class="flex items-center space-x-4">
                  <!-- Drag Handle -->
                  <div class="drag-handle cursor-grab active:cursor-grabbing text-gray-400 hover:text-gray-600 p-2 rounded-md hover:bg-gray-100 transition-colors duration-200">
                    <i class="fas fa-grip-vertical text-lg"></i>
                  </div>

                  <!-- Position (hidden input) -->
                  <input type="hidden" name="heading_items[][position]" value="<%= index + 1 %>" class="position-input">

                  <!-- Icon Input -->
                  <div class="flex-shrink-0 w-32">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Icon</label>
                    <input type="text" 
                           name="heading_items[][icon]" 
                           value="<%= item[:icon] %>" 
                           placeholder="envelope"
                           class="icon-input w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                  </div>

                  <!-- Icon Preview -->
                  <div class="flex-shrink-0 w-16">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Preview</label>
                    <div class="icon-preview-cell flex items-center justify-center h-10 bg-gray-50 rounded-md border">
                      <% icon_name = item[:icon].to_s.tr('_', '-') %>
                      <span class="icon-preview-fas text-lg text-gray-600 mr-1">
                        <i class="fas fa-<%= icon_name %>"></i>
                      </span>
                      <span class="icon-preview-fab text-lg text-gray-600">
                        <i class="fab fa-<%= icon_name %>"></i>
                      </span>
                    </div>
                  </div>

                  <!-- Text Input -->
                  <div class="flex-1">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Display Text</label>
                    <input type="text" 
                           name="heading_items[][text]" 
                           value="<%= item[:text] %>" 
                           placeholder="john@example.com"
                           class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                  </div>

                  <!-- URL Input -->
                  <div class="flex-1">
                    <label class="block text-xs font-medium text-gray-700 mb-1">Link (Optional)</label>
                    <input type="url" 
                           name="heading_items[][url]" 
                           value="<%= item[:url].to_s %>" 
                           placeholder="https://..."
                           class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
                  </div>

                  <!-- Remove Button -->
                  <div class="flex-shrink-0">
                    <label class="block text-xs font-medium text-transparent mb-1">Remove</label>
                    <button type="button"
                            class="remove-item-button p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors duration-200"
                            title="Remove this item">
                      <i class="fas fa-trash text-lg"></i>
                    </button>
                  </div>
                </div>
              </div>
            <% end %>
          </div>


        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-800"></h3>
            <button type="button"
                    id="add-item-button"
                    class="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200">
              <i class="fas fa-plus mr-2"></i>
              Add Item
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200 justify-between">
          <%= link_to "Cancel", root_path,
                      class: "flex-1 sm:flex-initial px-6 py-3 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200 text-center" %>
          <%= submit_tag "Save Changes",
                         class: "flex-1 sm:flex-initial px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200 cursor-pointer" %>
        </div>

      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const container = document.getElementById('heading-items-container');
  const addButton = document.getElementById('add-item-button');

  if (!container || !addButton) return;

  const CvEdit = {
    // Add new item
    addItem() {
      const currentItems = container.children.length;
      const newPosition = currentItems + 1;
      
      const newRow = document.createElement('div');
      newRow.className = 'item-row bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200';
      newRow.dataset.position = newPosition;
      newRow.innerHTML = `
        <div class="flex items-center space-x-4">
          <div class="drag-handle cursor-grab active:cursor-grabbing text-gray-400 hover:text-gray-600 p-2 rounded-md hover:bg-gray-100 transition-colors duration-200">
            <i class="fas fa-grip-vertical text-lg"></i>
          </div>
          <input type="hidden" name="heading_items[][position]" value="${newPosition}" class="position-input">
          <div class="flex-shrink-0 w-32">
            <label class="block text-xs font-medium text-gray-700 mb-1">Icon</label>
            <input type="text" name="heading_items[][icon]" value="" placeholder="envelope" 
                   class="icon-input w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-shrink-0 w-16">
            <label class="block text-xs font-medium text-gray-700 mb-1">Preview</label>
            <div class="icon-preview-cell flex items-center justify-center h-10 bg-gray-50 rounded-md border">
              <span class="icon-preview-fas text-lg text-gray-600 mr-1"></span>
              <span class="icon-preview-fab text-lg text-gray-600"></span>
            </div>
          </div>
          <div class="flex-1">
            <label class="block text-xs font-medium text-gray-700 mb-1">Display Text</label>
            <input type="text" name="heading_items[][text]" value="" placeholder="john@example.com" 
                   class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-1">
            <label class="block text-xs font-medium text-gray-700 mb-1">Link (Optional)</label>
            <input type="url" name="heading_items[][url]" value="" placeholder="https://..." 
                   class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent">
          </div>
          <div class="flex-shrink-0">
            <label class="block text-xs font-medium text-transparent mb-1">Remove</label>
            <button type="button" class="remove-item-button p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors duration-200" title="Remove this item">
              <i class="fas fa-trash text-lg"></i>
            </button>
          </div>
        </div>
      `;
      
      // Add with animation
      newRow.style.opacity = '0';
      newRow.style.transform = 'translateY(-10px)';
      container.appendChild(newRow);
      
      // Trigger animation
      requestAnimationFrame(() => {
        newRow.style.transition = 'all 0.3s ease-out';
        newRow.style.opacity = '1';
        newRow.style.transform = 'translateY(0)';
      });
      
      this.updatePositions();
    },

    // Remove item
    removeItem(event) {
      const button = event.target.closest('.remove-item-button');
      const row = button.closest('.item-row');
      
      if (row && container.children.length > 1) {
        // Animate removal
        row.style.transition = 'all 0.3s ease-out';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';
        
        setTimeout(() => {
          row.remove();
          this.updatePositions();
        }, 300);
      } else if (container.children.length <= 1) {
        this.showMessage("Cannot remove the last item.", 'warning');
      }
    },

    // Update icon preview
    updatePreview(event) {
      const input = event.target;
      const row = input.closest('.item-row');
      const previewFas = row.querySelector('.icon-preview-fas');
      const previewFab = row.querySelector('.icon-preview-fab');
      
      if (previewFas && previewFab) {
        const iconName = input.value.trim().replace(/_/g, '-');
        if (iconName) {
          previewFas.innerHTML = `<i class="fas fa-${iconName}"></i>`;
          previewFab.innerHTML = `<i class="fab fa-${iconName}"></i>`;
        } else {
          previewFas.innerHTML = '';
          previewFab.innerHTML = '';
        }
      }
    },

    // Update position values based on current order
    updatePositions() {
      const rows = container.querySelectorAll('.item-row');
      rows.forEach((row, index) => {
        const position = index + 1;
        row.dataset.position = position;
        const positionInput = row.querySelector('.position-input');
        if (positionInput) {
          positionInput.value = position;
        }
      });
    },

    // Drag and drop implementation
    initDragAndDrop() {
      let draggedElement = null;
      let placeholder = null;

      const createPlaceholder = () => {
        const div = document.createElement('div');
        div.className = 'placeholder bg-blue-100 border-2 border-dashed border-blue-300 rounded-lg p-4 opacity-50';
        div.innerHTML = '<div class="text-center text-blue-500 font-medium">Drop here</div>';
        return div;
      };

      container.addEventListener('mousedown', (e) => {
        const handle = e.target.closest('.drag-handle');
        if (!handle) return;

        draggedElement = handle.closest('.item-row');
        placeholder = createPlaceholder();
        
        // Visual feedback
        draggedElement.classList.add('opacity-50', 'transform', 'rotate-2', 'scale-105', 'z-10');
        draggedElement.style.pointerEvents = 'none';
        document.body.style.cursor = 'grabbing';
        
        e.preventDefault();
      });

      container.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      container.addEventListener('mouseenter', (e) => {
        if (!draggedElement) return;
        
        const targetRow = e.target.closest('.item-row');
        if (!targetRow || targetRow === draggedElement) return;

        const rect = targetRow.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;
        
        if (e.clientY < midY) {
          targetRow.parentNode.insertBefore(placeholder, targetRow);
        } else {
          targetRow.parentNode.insertBefore(placeholder, targetRow.nextSibling);
        }
      }, true);

      document.addEventListener('mouseup', () => {
        if (!draggedElement) return;

        // Move dragged element to placeholder position
        if (placeholder && placeholder.parentNode) {
          placeholder.parentNode.insertBefore(draggedElement, placeholder);
          placeholder.remove();
        }

        // Reset styles
        draggedElement.classList.remove('opacity-50', 'transform', 'rotate-2', 'scale-105', 'z-10');
        draggedElement.style.pointerEvents = '';
        document.body.style.cursor = '';

        // Update positions
        this.updatePositions();
        
        draggedElement = null;
        placeholder = null;
      });

      // Handle mouse move for continuous drag effect
      container.addEventListener('mousemove', (e) => {
        if (!draggedElement) return;
        
        const targetRow = e.target.closest('.item-row');
        if (!targetRow || targetRow === draggedElement) return;

        const rect = targetRow.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;
        
        // Remove existing placeholder
        if (placeholder && placeholder.parentNode) {
          placeholder.remove();
        }
        
        // Add placeholder in new position
        if (e.clientY < midY) {
          targetRow.parentNode.insertBefore(placeholder, targetRow);
        } else {
          targetRow.parentNode.insertBefore(placeholder, targetRow.nextSibling);
        }
      });
    },

    // Show message helper
    showMessage(text, type = 'info') {
      const message = document.createElement('div');
      message.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 transition-all duration-300 ${
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
      }`;
      message.textContent = text;
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.style.opacity = '0';
        message.style.transform = 'translateY(-20px)';
        setTimeout(() => message.remove(), 300);
      }, 3000);
    }
  };

  // Event listeners
  addButton.addEventListener('click', () => CvEdit.addItem());

  // Event delegation for dynamic elements
  container.addEventListener('click', function(event) {
    if (event.target.closest('.remove-item-button')) {
      CvEdit.removeItem(event);
    }
  });

  container.addEventListener('input', function(event) {
    if (event.target.classList.contains('icon-input')) {
      CvEdit.updatePreview(event);
    }
  });

  // Initialize drag and drop
  CvEdit.initDragAndDrop();

  // Initialize existing icon previews
  container.querySelectorAll('.icon-input').forEach(input => {
    CvEdit.updatePreview({ target: input });
  });
});
</script>
