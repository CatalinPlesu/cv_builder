<div class="flex min-h-screen bg-base-200 py-8">
  <!-- Sticky Sidebar -->
  <div class="w-64 p-6 bg-base-100 shadow-xl rounded-r-2xl flex flex-col space-y-4 sticky top-6 h-fit self-start mt-6 ml-6">
    <%= link_to "← Back", master_cv_index_path, class: "px-4 py-3 bg-base-200 text-base-content font-medium rounded-lg hover:bg-base-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-base-300 transition text-center border border-base-300" %>
    <%= button_tag "💾 Save Changes", form: "experiences-edit-form", class: "px-4 py-3 btn btn-primary rounded-lg transition shadow-lg" %>
  </div>

  <!-- Main Content -->
  <div class="flex-1 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="bg-base-100 shadow-xl rounded-lg overflow-hidden">
      <!-- Header -->
      <div class="bg-primary px-6 py-4">
        <h1 class="text-2xl font-bold text-primary-content">Edit Experience</h1>
        <p class="text-primary-content/80 mt-1">Manage your professional experience</p>
      </div>

      <%= form_with url: upsert_experiences_path, method: :put, local: true, html: { id: "experiences-edit-form", class: "p-6 space-y-6" } do |form| %>

        <!-- Experience Items Section -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-base-content">Work History</h3>
          </div>

          <!-- Items Container -->
          <div id="experiences-container" class="space-y-3">
            <% @experiences.each_with_index do |experience, index| %>
              <div class="experience-row bg-base-100 border border-base-300 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200" data-position="<%= index + 1 %>">
                <div class="flex items-center space-x-4 mb-3">
                  <div class="drag-handle cursor-grab active:cursor-grabbing text-base-content/50 hover:text-base-content p-2 rounded-md hover:bg-base-200 transition-colors duration-200">
                    <i class="fas fa-grip-vertical text-lg"></i>
                  </div>

                  <input type="hidden" name="experiences[<%= index %>][position]" value="<%= index + 1 %>" class="position-input">
                  <input type="hidden" name="experiences[<%= index %>][id]" value="<%= experience.id %>" class="id-input">

                  <div class="flex-1">
                    <label class="block text-xs font-medium text-base-content mb-1">Company</label>
                    <input type="text"
                           name="experiences[<%= index %>][company]"
                           value="<%= experience.company %>"
                           placeholder="Google Inc."
                           class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                  </div>

                  <div class="flex-1">
                    <label class="block text-xs font-medium text-base-content mb-1">Location</label>
                    <input type="text"
                           name="experiences[<%= index %>][location]"
                           value="<%= experience.location %>"
                           placeholder="Mountain View, CA"
                           class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                  </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                  <div>
                    <label class="block text-xs font-medium text-base-content mb-1">Position Title</label>
                    <input type="text"
                           name="experiences[<%= index %>][position_title]"
                           value="<%= experience.position_title %>"
                           placeholder="Software Engineer"
                           class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                  </div>

                  <div>
                    <label class="block text-xs font-medium text-base-content mb-1">Current Job?</label>
                    <div class="flex items-center mt-2">
                      <input type="hidden" name="experiences[<%= index %>][current]" value="0">
                      <input type="checkbox"
                             name="experiences[<%= index %>][current]"
                             value="1"
                             <%= 'checked' if experience.current? %>
                             class="checkbox checkbox-primary focus:ring-primary">
                      <span class="ml-2 text-sm text-base-content">Yes, I currently work here</span>
                    </div>
                  </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                  <div>
                    <label class="block text-xs font-medium text-base-content mb-1">Start Date</label>
                    <input type="date"
                           name="experiences[<%= index %>][start_date]"
                           value="<%= experience.start_date ? experience.start_date.to_date : '' %>"
                           class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                  </div>

                  <div>
                    <label class="block text-xs font-medium text-base-content mb-1">End Date</label>
                    <input type="date"
                           name="experiences[<%= index %>][end_date]"
                           value="<%= experience.end_date ? experience.end_date.to_date : '' %>"
                           <%= 'disabled' if experience.current? %>
                           class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                  </div>

                  <div class="flex items-end">
                    <button type="button"
                            class="remove-experience-button w-full py-2 btn btn-error rounded-md transition-colors duration-200 flex items-center justify-center">
                      <i class="fas fa-trash mr-2"></i> Remove
                    </button>
                  </div>
                </div>

                <div class="mt-4">
                  <label class="block text-xs font-medium text-base-content mb-1">Bullet Points</label>
                  <div class="space-y-2 bullets-container" data-experience-index="<%= index %>">
                    <% experience.experience_bullets.each_with_index do |bullet, bullet_index| %>
                      <div class="flex items-center space-x-2 bullet-row" data-bullet-position="<%= bullet_index + 1 %>">
                        <div class="bullet-drag-handle cursor-grab active:cursor-grabbing text-base-content/50 hover:text-base-content p-1 rounded hover:bg-base-200">
                          <i class="fas fa-grip-horizontal text-sm"></i>
                        </div>
                        <input type="text"
                               name="experiences[<%= index %>][bullets][<%= bullet_index %>][content]"
                               value="<%= bullet.content %>"
                               placeholder="Describe your responsibilities or achievements"
                               class="flex-1 px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
                        <input type="hidden" name="experiences[<%= index %>][bullets][<%= bullet_index %>][id]" value="<%= bullet.id %>">
                        <input type="hidden" name="experiences[<%= index %>][bullets][<%= bullet_index %>][position]" value="<%= bullet_index + 1 %>" class="bullet-position-input">
                        <button type="button" class="remove-bullet-button text-error hover:text-error/80">
                          <i class="fas fa-times"></i>
                        </button>
                      </div>
                    <% end %>
                  </div>
                  <button type="button" class="add-bullet-button mt-2 text-primary hover:text-primary/80 text-sm">
                    + Add Bullet Point
                  </button>
                </div>
              </div>
            <% end %>
          </div>

          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-base-content"></h3>
            <button type="button"
                    id="add-experience-button"
                    class="inline-flex items-center px-4 py-2 btn btn-success rounded-lg transition-colors duration-200">
              <i class="fas fa-plus mr-2"></i>
              Add Experience
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row gap-4 pt-6 border-t border-base-300 justify-between">
          <%= link_to "Cancel", master_cv_index_path,
                      class: "flex-1 sm:flex-initial px-6 py-3 btn btn-error rounded-lg transition-colors duration-200 text-center" %>
          <%= submit_tag "Save Experience",
                         class: "flex-1 sm:flex-initial px-6 py-3 btn btn-success rounded-lg transition-colors duration-200 cursor-pointer" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const container = document.getElementById('experiences-container');
  const addButton = document.getElementById('add-experience-button');

  if (!container || !addButton) return;

  const ExperiencesEdit = {
    addItem() {
      const currentItems = container.children.length;
      const newPosition = currentItems + 1;

      const newRow = document.createElement('div');
      newRow.className = 'experience-row bg-base-100 border border-base-300 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200';
      newRow.dataset.position = newPosition;
      newRow.innerHTML = `
        <div class="flex items-center space-x-4 mb-3">
          <div class="drag-handle cursor-grab active:cursor-grabbing text-base-content/50 hover:text-base-content p-2 rounded-md hover:bg-base-200 transition-colors duration-200">
            <i class="fas fa-grip-vertical text-lg"></i>
          </div>
          <input type="hidden" name="experiences[${currentItems}][position]" value="${newPosition}" class="position-input">
          <input type="hidden" name="experiences[${currentItems}][id]" value="" class="id-input">

          <div class="flex-1">
            <label class="block text-xs font-medium text-base-content mb-1">Company</label>
            <input type="text" name="experiences[${currentItems}][company]" value="" placeholder="Google Inc."
                   class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
          </div>

          <div class="flex-1">
            <label class="block text-xs font-medium text-base-content mb-1">Location</label>
            <input type="text" name="experiences[${currentItems}][location]" value="" placeholder="Mountain View, CA"
                   class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
          <div>
            <label class="block text-xs font-medium text-base-content mb-1">Position Title</label>
            <input type="text" name="experiences[${currentItems}][position_title]" value="" placeholder="Software Engineer"
                   class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
          </div>

          <div>
            <label class="block text-xs font-medium text-base-content mb-1">Current Job?</label>
            <div class="flex items-center mt-2">
              <input type="hidden" name="experiences[${currentItems}][current]" value="0">
              <input type="checkbox" name="experiences[${currentItems}][current]" value="1" class="checkbox checkbox-primary focus:ring-primary">
              <span class="ml-2 text-sm text-base-content">Yes, I currently work here</span>
            </div>
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
          <div>
            <label class="block text-xs font-medium text-base-content mb-1">Start Date</label>
            <input type="date" name="experiences[${currentItems}][start_date]" value=""
                   class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
          </div>

          <div>
            <label class="block text-xs font-medium text-base-content mb-1">End Date</label>
            <input type="date" name="experiences[${currentItems}][end_date]" value=""
                   class="w-full px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
          </div>

          <div class="flex items-end">
            <button type="button" class="remove-experience-button w-full py-2 btn btn-error rounded-md transition-colors duration-200 flex items-center justify-center">
              <i class="fas fa-trash mr-2"></i> Remove
            </button>
          </div>
        </div>

        <!-- Bullets -->
        <div class="mt-4">
          <label class="block text-xs font-medium text-base-content mb-1">Bullet Points</label>
          <div class="space-y-2 bullets-container" data-experience-index="${currentItems}">
            <!-- Empty bullets container - will be populated by user -->
          </div>
          <button type="button" class="add-bullet-button mt-2 text-primary hover:text-primary/80 text-sm">
            + Add Bullet Point
          </button>
        </div>
      `;

      newRow.style.opacity = '0';
      newRow.style.transform = 'translateY(-10px)';
      container.appendChild(newRow);

      requestAnimationFrame(() => {
        newRow.style.transition = 'all 0.3s ease-out';
        newRow.style.opacity = '1';
        newRow.style.transform = 'translateY(0)';
      });

      this.updatePositions();
      this.initBulletDragAndDrop(newRow);
    },

    removeItem(event) {
      const button = event.target.closest('.remove-experience-button');
      const row = button.closest('.experience-row');

      if (row && container.children.length > 1) {
        row.style.transition = 'all 0.3s ease-out';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';

        setTimeout(() => {
          row.remove();
          this.updatePositions();
        }, 300);
      } else if (container.children.length <= 1) {
        alert("Cannot remove the last experience entry.");
      }
    },

    addBullet(event) {
      // Prevent event bubbling
      event.stopPropagation();
      
      const button = event.target.closest('.add-bullet-button');
      const container = button.closest('.experience-row');
      const bulletsContainer = container.querySelector('.bullets-container');
      const experienceIndex = Array.from(container.parentNode.children).indexOf(container);
      const bulletCount = bulletsContainer.children.length;

      const newBullet = document.createElement('div');
      newBullet.className = 'flex items-center space-x-2 bullet-row';
      newBullet.dataset.bulletPosition = bulletCount + 1;
      newBullet.innerHTML = `
        <div class="bullet-drag-handle cursor-grab active:cursor-grabbing text-base-content/50 hover:text-base-content p-1 rounded hover:bg-base-200">
          <i class="fas fa-grip-horizontal text-sm"></i>
        </div>
        <input type="text" 
               name="experiences[${experienceIndex}][bullets][${bulletCount}][content]" 
               placeholder="Describe your responsibilities or achievements"
               class="flex-1 px-3 py-2 text-sm border border-base-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent bg-base-100 text-base-content">
        <input type="hidden" name="experiences[${experienceIndex}][bullets][${bulletCount}][id]" value="">
        <input type="hidden" name="experiences[${experienceIndex}][bullets][${bulletCount}][position]" value="${bulletCount + 1}" class="bullet-position-input">
        <button type="button" class="remove-bullet-button text-error hover:text-error/80">
          <i class="fas fa-times"></i>
        </button>
      `;

      bulletsContainer.appendChild(newBullet);
      this.updateBulletPositions(bulletsContainer);
    },

    removeBullet(event) {
      // Prevent event bubbling
      event.stopPropagation();
      
      const button = event.target.closest('.remove-bullet-button');
      const bulletRow = button.closest('.bullet-row');
      const bulletsContainer = bulletRow.closest('.bullets-container');
      
      bulletRow.remove();
      this.updateBulletPositions(bulletsContainer);
    },

    updatePositions() {
      const rows = container.querySelectorAll('.experience-row');
      rows.forEach((row, index) => {
        const position = index + 1;
        row.dataset.position = position;
        
        // Update experience position input
        const positionInput = row.querySelector('.position-input');
        if (positionInput) {
          positionInput.name = `experiences[${index}][position]`;
          positionInput.value = position;
        }
        
        // Update experience ID input
        const idInput = row.querySelector('.id-input');
        if (idInput) {
          idInput.name = `experiences[${index}][id]`;
        }
        
        // Update all other inputs in this row
        const inputs = row.querySelectorAll('input[name*="experiences["]');
        inputs.forEach(input => {
          const name = input.name;
          const match = name.match(/experiences\[(\d+)\]/);
          if (match) {
            input.name = name.replace(/experiences\[\d+\]/, `experiences[${index}]`);
          }
        });
        
        // Update bullet positions
        const bulletsContainer = row.querySelector('.bullets-container');
        if (bulletsContainer) {
          this.updateBulletPositions(bulletsContainer);
        }
      });
    },

    updateBulletPositions(bulletsContainer) {
      const bulletRows = bulletsContainer.querySelectorAll('.bullet-row');
      const experienceIndex = bulletsContainer.closest('.experience-row').dataset.position - 1;
      
      bulletRows.forEach((bulletRow, bulletIndex) => {
        bulletRow.dataset.bulletPosition = bulletIndex + 1;
        
        const bulletInputs = bulletRow.querySelectorAll('input[name*="bullets["]');
        bulletInputs.forEach(input => {
          const name = input.name;
          const match = name.match(/bullets\[(\d+)\]/);
          if (match) {
            input.name = name.replace(/bullets\[\d+\]/, `bullets[${bulletIndex}]`);
          }
        });
        
        // Update bullet position input
        const bulletPositionInput = bulletRow.querySelector('.bullet-position-input');
        if (bulletPositionInput) {
          bulletPositionInput.value = bulletIndex + 1;
        }
      });
      
      // Update experience index for bullets container
      bulletsContainer.dataset.experienceIndex = experienceIndex;
    },

    initDragAndDrop() {
      let draggedElement = null;
      let placeholder = null;

      const createPlaceholder = () => {
        const div = document.createElement('div');
        div.className = 'placeholder bg-primary/10 border-2 border-dashed border-primary rounded-lg p-4 opacity-50';
        div.innerHTML = '<div class="text-center text-primary font-medium">Drop here</div>';
        return div;
      };

      container.addEventListener('mousedown', (e) => {
        const handle = e.target.closest('.drag-handle');
        if (!handle) return;

        draggedElement = handle.closest('.experience-row');
        placeholder = createPlaceholder();

        draggedElement.classList.add('opacity-50', 'transform', 'rotate-2', 'scale-105', 'z-10');
        draggedElement.style.pointerEvents = 'none';
        document.body.style.cursor = 'grabbing';

        e.preventDefault();
      });

      container.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      container.addEventListener('mouseenter', (e) => {
        if (!draggedElement) return;

        const targetRow = e.target.closest('.experience-row');
        if (!targetRow || targetRow === draggedElement) return;

        const rect = targetRow.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;

        if (e.clientY < midY) {
          targetRow.parentNode.insertBefore(placeholder, targetRow);
        } else {
          targetRow.parentNode.insertBefore(placeholder, targetRow.nextSibling);
        }
      }, true);

      document.addEventListener('mouseup', () => {
        if (!draggedElement) return;

        if (placeholder && placeholder.parentNode) {
          placeholder.parentNode.insertBefore(draggedElement, placeholder);
          placeholder.remove();
        }

        draggedElement.classList.remove('opacity-50', 'transform', 'rotate-2', 'scale-105', 'z-10');
        draggedElement.style.pointerEvents = '';
        document.body.style.cursor = '';

        this.updatePositions();

        draggedElement = null;
        placeholder = null;
      });

      container.addEventListener('mousemove', (e) => {
        if (!draggedElement) return;

        const targetRow = e.target.closest('.experience-row');
        if (!targetRow || targetRow === draggedElement) return;

        const rect = targetRow.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;

        if (placeholder && placeholder.parentNode) {
          placeholder.remove();
        }

        if (e.clientY < midY) {
          targetRow.parentNode.insertBefore(placeholder, targetRow);
        } else {
          targetRow.parentNode.insertBefore(placeholder, targetRow.nextSibling);
        }
      });
    },

    initBulletDragAndDrop(experienceRow) {
      const bulletsContainer = experienceRow.querySelector('.bullets-container');
      if (!bulletsContainer) return;

      let draggedBullet = null;
      let bulletPlaceholder = null;

      const createBulletPlaceholder = () => {
        const div = document.createElement('div');
        div.className = 'bullet-placeholder bg-primary/5 border border-dashed border-primary rounded my-1 h-10';
        return div;
      };

      bulletsContainer.addEventListener('mousedown', (e) => {
        const handle = e.target.closest('.bullet-drag-handle');
        if (!handle) return;

        draggedBullet = handle.closest('.bullet-row');
        bulletPlaceholder = createBulletPlaceholder();

        draggedBullet.classList.add('opacity-50');
        document.body.style.cursor = 'grabbing';

        e.preventDefault();
      });

      document.addEventListener('mouseup', () => {
        if (!draggedBullet) return;

        if (bulletPlaceholder && bulletPlaceholder.parentNode) {
          bulletPlaceholder.parentNode.insertBefore(draggedBullet, bulletPlaceholder);
          bulletPlaceholder.remove();
        }

        draggedBullet.classList.remove('opacity-50');
        document.body.style.cursor = '';

        this.updateBulletPositions(bulletsContainer);

        draggedBullet = null;
        bulletPlaceholder = null;
      });

      bulletsContainer.addEventListener('mousemove', (e) => {
        if (!draggedBullet) return;

        const targetBullet = e.target.closest('.bullet-row');
        if (!targetBullet || targetBullet === draggedBullet) return;

        const rect = targetBullet.getBoundingClientRect();
        const midY = rect.top + rect.height / 2;

        if (bulletPlaceholder && bulletPlaceholder.parentNode) {
          bulletPlaceholder.remove();
        }

        if (e.clientY < midY) {
          targetBullet.parentNode.insertBefore(bulletPlaceholder, targetBullet);
        } else {
          targetBullet.parentNode.insertBefore(bulletPlaceholder, targetBullet.nextSibling);
        }
      });
    }
  };

  addButton.addEventListener('click', () => ExperiencesEdit.addItem());

  container.addEventListener('click', function(event) {
    if (event.target.closest('.remove-experience-button')) {
      ExperiencesEdit.removeItem(event);
    } else if (event.target.closest('.add-bullet-button')) {
      ExperiencesEdit.addBullet(event);
    } else if (event.target.closest('.remove-bullet-button')) {
      ExperiencesEdit.removeBullet(event);
    }
  });

  // Add bullet functionality to existing items
  document.querySelectorAll('.add-bullet-button').forEach(button => {
    button.addEventListener('click', function(event) {
      ExperiencesEdit.addBullet(event);
    });
  });

  document.querySelectorAll('.remove-bullet-button').forEach(button => {
    button.addEventListener('click', function(event) {
      ExperiencesEdit.removeBullet(event);
    });
  });

  // Initialize drag and drop for existing bullet points
  document.querySelectorAll('.experience-row').forEach(row => {
    ExperiencesEdit.initBulletDragAndDrop(row);
  });

  ExperiencesEdit.initDragAndDrop();
});
</script>
