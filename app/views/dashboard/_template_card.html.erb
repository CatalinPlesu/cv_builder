<div class="border border-gray-200 rounded-xl p-4 transition-all duration-300 hover:shadow-lg hover:border-purple-300 flex flex-col sm:flex-row gap-4" 
     id="template-card-<%= template.id %>">
  <!-- Left Content -->
  <div class="flex-1">
    <div class="flex justify-between items-start mb-3">
      <div>
        <h3 class="font-semibold text-gray-800"><%= template.name %></h3>
        <p class="text-gray-500 text-xs mt-1">
          <%= template.tags.size %> tags, <%= template.sections.size %> sections
        </p>
        <!-- PDF Status -->
        <div class="mt-2" id="pdf-status-<%= template.id %>">
          <% if template.template_pdf %>
            <% pdf = template.template_pdf %>
            <% case pdf.status %>
            <% when 'completed' %>
              <div class="flex items-center gap-1.5 text-xs">
                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                <span class="text-green-600 font-medium">PDF Ready</span>
                <span class="text-gray-400">•</span>
                <span class="text-gray-500">
                  Generated <%= time_ago_in_words(pdf.completed_at) %> ago
                </span>
                <% if pdf.pdf_size %>
                  <span class="text-gray-400">•</span>
                  <span class="text-gray-500"><%= pdf.pdf_size_human %></span>
                <% end %>
              </div>
            <% when 'processing' %>
              <div class="flex items-center gap-1.5 text-xs">
                <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span class="text-blue-600 font-medium">Generating PDF...</span>
                <% if pdf.started_at %>
                  <span class="text-gray-400">•</span>
                  <span class="text-gray-500">
                    Started <%= time_ago_in_words(pdf.started_at) %> ago
                  </span>
                <% end %>
              </div>
            <% when 'pending' %>
              <div class="flex items-center gap-1.5 text-xs">
                <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                <span class="text-yellow-600 font-medium">Queued for generation</span>
                <span class="text-gray-400">•</span>
                <span class="text-gray-500">Position #<%= pdf.queue_position %></span>
                <% if pdf.estimated_wait_time_human %>
                  <span class="text-gray-400">•</span>
                  <span class="text-gray-500">~<%= pdf.estimated_wait_time_human %> wait</span>
                <% end %>
              </div>
            <% when 'failed' %>
              <div class="flex items-center gap-1.5 text-xs">
                <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                <span class="text-red-600 font-medium">Generation Failed</span>
                <span class="text-gray-400">•</span>
                <span class="text-gray-500">
                  <%= time_ago_in_words(pdf.updated_at) %> ago
                </span>
              </div>
            <% end %>
          <% else %>
            <div class="flex items-center gap-1.5 text-xs">
              <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
              <span class="text-gray-500">No PDF generated yet</span>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Right - Action Buttons -->
  <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
    <!-- Primary Actions Column -->
    <div class="flex flex-col gap-2">
      <!-- Edit Button -->
      <!-- Kept as link_to because it triggers JS, not a direct server request -->
      <%= link_to '#', # Doesn't navigate, JS handles the action
                  onclick: "openEditModal(#{template.id}, '#{j(template.name)}', #{template.tag_ids.to_json}, #{template.section_ids.to_json}); return false;", # Prevent default link action
                  class: "px-3 py-2 bg-gray-100 text-gray-600 rounded-lg text-sm font-medium hover:bg-gray-200 transition-colors flex items-center justify-center gap-2" do %>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2  0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
        </svg>
        Edit
      <% end %>

      <!-- Delete Button -->
      <!-- Uses button_to for proper DELETE request -->
      <%= button_to delete_template_path(template), # This resolves to the correct path for DELETE
                    method: :delete, # Specifies the HTTP method
                    form: { data: { turbo_confirm: 'Are you sure you want to delete this template?' } }, # Adds confirmation (Rails 7+ style, or use `confirm:` option for older versions/without Turbo)
                    class: "px-3 py-2 bg-red-100 text-red-600 rounded-lg text-sm font-medium hover:bg-red-200 transition-colors flex items-center justify-center gap-2 w-full" do %>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete
      <% end %>
    </div>

    <!-- Secondary Actions Column -->
    <div class="flex flex-col gap-2">
      <!-- Preview HTML Button -->
      <%= link_to template_path(template),
                 class: "px-3 py-2 bg-green-100 text-green-600 rounded-lg text-sm font-medium hover:bg-green-200 transition-colors flex items-center justify-center gap-2",
                 target: "_blank" do %>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
        </svg>
        Preview HTML
      <% end %>

      <!-- Preview TeX Button - FIXED: Now uses .txt format for preview -->
      <%= link_to template_path(template, format: :txt),
                 class: "px-3 py-2 bg-purple-100 text-purple-600 rounded-lg text-sm font-medium hover:bg-purple-200 transition-colors flex items-center justify-center gap-2",
                 target: "_blank" do %>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Preview TeX
      <% end %>

      <!-- Download TeX Button - Uses .tex format with download -->
      <%= link_to template_path(template, format: :tex),
                 class: "px-3 py-2 bg-indigo-100 text-indigo-600 rounded-lg text-sm font-medium hover:bg-indigo-200 transition-colors flex items-center justify-center gap-2",
                 download: true do %>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Download .tex
      <% end %>

      <!-- PDF Actions -->
      <div class="flex flex-col gap-1">
        <!-- Preview PDF Button (RESTORED with correct syntax) -->
        <% if template.template_pdf&.id %>
          <%= link_to dashboard_preview_template_pdf_path(template.template_pdf),
                      class: "px-3 py-2 bg-yellow-100 text-yellow-700 rounded-lg text-sm font-medium hover:bg-yellow-200 transition-colors flex items-center justify-center gap-2",
                      target: "_blank" do %>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            View PDF
          <% end %>
        <% else %>
          <span class="px-3 py-2 bg-gray-100 text-gray-500 rounded-lg text-sm font-medium">
            PDF not available
          </span>
        <% end %>

        <!-- Generate PDF Button -->
        <%= link_to '#',
            onclick: "generatePDF(#{template.id}); return false;",
            id: "generate-btn-#{template.id}",
            class: "generate-pdf-btn px-3 py-2 bg-blue-100 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-200 transition-colors flex items-center justify-center gap-2" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Generate PDF
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
// Prevent spam clicking and handle PDF generation with 2-minute debounce
let lastGenerationTime = {};
let generatingTemplates = new Set(); // Track which templates are generating

function generatePDF(templateId) {
  const now = Date.now();
  const lastTime = lastGenerationTime[templateId] || 0;
  
  // Check if 2 minutes have passed since last generation
  if (now - lastTime < 120000) { // 120000 ms = 2 minutes
    const remainingTime = Math.ceil((120000 - (now - lastTime)) / 1000);
    alert(`Please wait ${Math.ceil(remainingTime / 60)} minute(s) before generating PDF again.`);
    return false;
  }

  const button = document.getElementById(`generate-btn-${templateId}`);
  if (!button) return false;
  
  // Disable button and show loading state
  button.disabled = true;
  const originalHtml = button.innerHTML;
  button.innerHTML = `
    <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
    </svg>
    Generating...
  `;
  
  // Update last generation time
  lastGenerationTime[templateId] = now;
  generatingTemplates.add(templateId);
  
  // Make the request to the new endpoint
  fetch(`/templates/${templateId}/generate_pdf`, {
    method: 'POST',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Update the status display immediately
      updatePDFStatus(templateId, {
        status: 'pending',
        queue_position: data.queue_position
      });
      
      // Start polling for this template
      startStatusPolling(templateId);
      
      // Show success message (optional)
      console.log(data.message);
    } else {
      alert(data.error || 'Failed to queue PDF generation');
      // Restore button
      button.disabled = false;
      button.innerHTML = originalHtml;
      generatingTemplates.delete(templateId);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Failed to queue PDF generation. Please try again.');
    // Restore button
    button.disabled = false;
    button.innerHTML = originalHtml;
    generatingTemplates.delete(templateId);
  });
  
  return false; // Prevent default link behavior
}

// Poll status for a specific template
function startStatusPolling(templateId) {
  const pollInterval = setInterval(() => {
    fetch(`/templates/${templateId}/pdf_status`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      updatePDFStatus(templateId, data);
      
      // Stop polling if completed or failed
      if (data.status === 'completed' || data.status === 'failed') {
        clearInterval(pollInterval);
        generatingTemplates.delete(templateId);
        
        // Update button
        const button = document.getElementById(`generate-btn-${templateId}`);
        if (button) {
          button.disabled = false;
          button.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            ${data.status === 'completed' ? 'Regenerate PDF' : 'Generate PDF'}
          `;
        }
        
        // Update View PDF button if completed
        if (data.status === 'completed' && data.pdf_id) {
          updateViewPDFButton(templateId, data.pdf_id);
        }
      }
    })
    .catch(error => {
      console.error('Status polling error:', error);
      clearInterval(pollInterval);
      generatingTemplates.delete(templateId);
    });
  }, 3000); // Poll every 3 seconds
}

function updatePDFStatus(templateId, pdfData) {
  const statusElement = document.getElementById(`pdf-status-${templateId}`);
  
  if (statusElement) {
    let statusHtml = '';
    switch(pdfData.status) {
      case 'completed':
        statusHtml = `
          <div class="flex items-center gap-1.5 text-xs">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-green-600 font-medium">PDF Ready</span>
            ${pdfData.completed_at ? `
              <span class="text-gray-400">•</span>
              <span class="text-gray-500">Generated ${timeAgo(pdfData.completed_at)} ago</span>
            ` : ''}
            ${pdfData.pdf_size ? `<span class="text-gray-400">•</span><span class="text-gray-500">${formatBytes(pdfData.pdf_size)}</span>` : ''}
          </div>
        `;
        break;
      case 'processing':
        statusHtml = `
          <div class="flex items-center gap-1.5 text-xs">
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
            <span class="text-blue-600 font-medium">Generating PDF...</span>
            ${pdfData.started_at ? `<span class="text-gray-400">•</span><span class="text-gray-500">Started ${timeAgo(pdfData.started_at)} ago</span>` : ''}
          </div>
        `;
        break;
      case 'pending':
        statusHtml = `
          <div class="flex items-center gap-1.5 text-xs">
            <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
            <span class="text-yellow-600 font-medium">Queued for generation</span>
            <span class="text-gray-400">•</span>
            <span class="text-gray-500">Position #${pdfData.queue_position}</span>
            ${pdfData.estimated_wait_time_human ? `<span class="text-gray-400">•</span><span class="text-gray-500">~${pdfData.estimated_wait_time_human} wait</span>` : ''}
          </div>
        `;
        break;
      case 'failed':
        statusHtml = `
          <div class="flex items-center gap-1.5 text-xs">
            <div class="w-2 h-2 bg-red-500 rounded-full"></div>
            <span class="text-red-600 font-medium">Generation Failed</span>
            <span class="text-gray-400">•</span>
            <span class="text-gray-500">${timeAgo(pdfData.updated_at)} ago</span>
          </div>
        `;
        break;
      default:
        statusHtml = `
          <div class="flex items-center gap-1.5 text-xs">
            <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
            <span class="text-gray-500">No PDF generated yet</span>
          </div>
        `;
    }
    statusElement.innerHTML = statusHtml;
  }
}

function updateViewPDFButton(templateId, pdfId) {
  // Find the PDF button container for this template
  const card = document.getElementById(`template-card-${templateId}`);
  if (!card) return;
  
  const pdfButtonContainer = card.querySelector('.flex.flex-col.gap-1');
  if (!pdfButtonContainer) return;
  
  // Replace the disabled button with an active View PDF link
  const viewButton = pdfButtonContainer.querySelector('a[href*="preview_template_pdf"], span.bg-gray-100');
  if (viewButton) {
    const newButton = document.createElement('a');
    newButton.href = `/dashboard/template_pdfs/${pdfId}/preview`;
    newButton.className = 'px-3 py-2 bg-yellow-100 text-yellow-700 rounded-lg text-sm font-medium hover:bg-yellow-200 transition-colors flex items-center justify-center gap-2';
    newButton.target = '_blank';
    newButton.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
      </svg>
      View PDF
    `;
    viewButton.replaceWith(newButton);
  }
}

// Helper functions (keep these as they are)
function timeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now - date) / 1000);
  
  if (seconds < 60) return `${seconds} seconds`;
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} minutes`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} hours`;
  const days = Math.floor(hours / 24);
  return `${days} days`;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// On page load, check for any templates that are currently generating
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[id^="pdf-status-"]').forEach(statusEl => {
    const templateId = statusEl.id.replace('pdf-status-', '');
    if (statusEl.textContent.includes('Generating') || statusEl.textContent.includes('Queued')) {
      startStatusPolling(templateId);
    }
  });
});
</script>
