<!-- app/views/dashboard/_template_card.html.erb -->
<!-- Template Card - Theme Aware -->
<div class="card bg-base-100 border border-primary/30" id="template-card-<%= template.id %>"> <!-- Slightly transparent border -->
  <div class="card-body p-4">
    <!-- Main Content and Actions Row -->
    <div class="flex flex-col lg:flex-row justify-between gap-4">
      
      <!-- Middle: Main Content -->
      <div class="flex-1">
        <h2 class="card-title text-lg mb-2 text-base-content"><%= template.name %></h2> <!-- Ensure title text color -->
        <div class="flex flex-wrap gap-2 mb-3">
          <!-- Badges use primary/secondary which adapt to theme -->
          <div class="badge badge-primary badge-sm">
            <%= template.tags.size %> tags
          </div>
          <div class="badge badge-secondary badge-sm">
            <%= template.sections.size %> sections
          </div>
        </div>

        <!-- PDF Status -->
        <div class="mt-2 text-sm" id="pdf-status-<%= template.id %>">
          <% if template.template_pdf %>
            <% pdf = template.template_pdf %>
            <% case pdf.status %>
            <% when 'completed' %>
              <div class="flex items-center gap-2">
                <div class="w-2 h-2 bg-success rounded-full"></div>
                <span class="text-success font-medium">PDF Ready</span>
                <span class="text-base-content/50">•</span>
                <span class="text-base-content/70">
                  Generated <%= time_ago_in_words(pdf.completed_at) %> ago
                </span>
                <% if pdf.pdf_size %>
                  <span class="text-base-content/50">•</span>
                  <span class="text-base-content/70"><%= pdf.pdf_size_human %></span>
                <% end %>
              </div>
            <% when 'processing' %>
              <div class="flex items-center gap-2">
                <div class="w-2 h-2 bg-info rounded-full animate-pulse"></div>
                <span class="text-info font-medium">Generating PDF...</span>
                <% if pdf.started_at %>
                  <span class="text-base-content/50">•</span>
                  <span class="text-base-content/70">
                    Started <%= time_ago_in_words(pdf.started_at) %> ago
                  </span>
                <% end %>
              </div>
            <% when 'pending' %>
              <div class="flex items-center gap-2">
                <div class="w-2 h-2 bg-warning rounded-full animate-pulse"></div>
                <span class="text-warning font-medium">Queued for generation</span>
                <span class="text-base-content/50">•</span>
                <span class="text-base-content/70">Position #<%= pdf.queue_position %></span>
                <% if pdf.estimated_wait_time_human %>
                  <span class="text-base-content/50">•</span>
                  <span class="text-base-content/70">~<%= pdf.estimated_wait_time_human %> wait</span>
                <% end %>
              </div>
            <% when 'failed' %>
              <div class="flex items-center gap-2">
                <div class="w-2 h-2 bg-error rounded-full"></div>
                <span class="text-error font-medium">Generation Failed</span>
                <span class="text-base-content/50">•</span>
                <span class="text-base-content/70">
                  <%= time_ago_in_words(pdf.updated_at) %> ago
                </span>
              </div>
            <% end %>
          <% else %>
            <div class="flex items-center gap-2">
                <!-- Use a more theme-aware color for the 'no pdf' dot -->
                <div class="w-2 h-2 bg-base-content/30 rounded-full"></div>
                <span class="text-base-content/70">No PDF generated yet</span>
            </div>
          <% end %>
        </div>
      </div>

       <!-- Far Right: Primary Action Buttons Column (Edit/Delete) -->
       <div class="flex flex-col gap-2 items-end">
        <!-- Edit Button - Standard btn-outline -->
        <%= link_to '#',
                    onclick: "openEditModal(#{template.id}, '#{j(template.name)}', #{template.tag_ids.to_json}, #{template.section_ids.to_json}); return false;",
                    class: "btn btn-outline btn-sm gap-2 min-w-[120px]" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
          </svg>
          Edit
        <% end %>

        <!-- Delete Button - Standard btn-outline btn-error -->
        <%= button_to delete_template_path(template),
                      method: :delete,
                      form: { data: { turbo_confirm: 'Are you sure you want to delete this template?' } },
                      class: "btn btn-outline btn-error btn-sm gap-2 min-w-[120px]" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
          </svg>
          Delete
        <% end %>
      </div>

      <!-- Right: Secondary Action Buttons Column (HTML, TeX, PDF actions) -->
      <div class="flex flex-col gap-2 items-end">
        <!-- Preview HTML Button - Standard btn-outline btn-success -->
        <%= link_to template_path(template),
                   class: "btn btn-outline btn-success btn-sm gap-2 min-w-[140px]" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
          </svg>
          View HTML
        <% end %>

        <!-- Preview TeX Button - Standard btn-outline btn-info -->
        <%= link_to template_path(template, format: :txt),
                   class: "btn btn-outline btn-info btn-sm gap-2 min-w-[140px]" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          View TeX
        <% end %>

        <!-- Download TeX Button - Standard btn-outline btn-primary -->
        <%= link_to template_path(template, format: :tex),
                   class: "btn btn-outline btn-primary btn-sm gap-2 min-w-[140px]" do %>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Download TeX
        <% end %>

        <!-- PDF Actions -->
        <div class="flex flex-col gap-2 w-full" id="pdf-actions-<%= template.id %>">
          <!-- Preview PDF Button - Standard btn-outline btn-warning -->
          <% if template.template_pdf&.id %>
            <%= link_to dashboard_preview_template_pdf_path(template.template_pdf),
                        class: "btn btn-outline btn-warning btn-sm gap-2 min-w-[140px]" do %>
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              View PDF
            <% end %>
          <% else %>
            <!-- Disabled PDF Button - Standard btn-outline btn-disabled -->
            <span class="btn btn-outline btn-disabled btn-sm min-w-[140px]" id="pdf-placeholder-<%= template.id %>">
              PDF not available
            </span>
          <% end %>

          <!-- Generate PDF Button - Standard btn-outline btn-accent -->
          <%= link_to '#',
              onclick: "generatePDF(#{template.id}); return false;",
              id: "generate-btn-#{template.id}",
              class: "btn btn-outline btn-accent btn-sm gap-2 min-w-[140px]" do %>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Generate PDF
          <% end %>
        </div>
      </div>

    </div>
  </div>
</div>

<script>
// Prevent spam clicking and handle PDF generation with 2-minute debounce
let lastGenerationTime = {};
let generatingTemplates = new Set(); // Track which templates are generating

function generatePDF(templateId) {
  const now = Date.now();
  const lastTime = lastGenerationTime[templateId] || 0;
  
  // Check if 2 minutes have passed since last generation
  if (now - lastTime < 120000) { // 120000 ms = 2 minutes
    const remainingTime = Math.ceil((120000 - (now - lastTime)) / 1000);
    alert(`Please wait ${Math.ceil(remainingTime / 60)} minute(s) before generating PDF again.`);
    return false;
  }

  const button = document.getElementById(`generate-btn-${templateId}`);
  if (!button) return false;
  
  // Disable button and show loading state
  button.disabled = true;
  const originalHtml = button.innerHTML;
  button.innerHTML = `
    <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
    </svg>
    Generating...
  `;
  
  // Update last generation time
  lastGenerationTime[templateId] = now;
  generatingTemplates.add(templateId);
  
  // Make the request to the new endpoint
  fetch(`/templates/${templateId}/generate_pdf`, {
    method: 'POST',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Update the status display immediately
      updatePDFStatus(templateId, {
        status: 'pending',
        queue_position: data.queue_position
      });
      
      // Start polling for this template
      startStatusPolling(templateId);
      
      // Show success message (optional)
      console.log(data.message);
    } else {
      alert(data.error || 'Failed to queue PDF generation');
      // Restore button
      button.disabled = false;
      button.innerHTML = originalHtml;
      generatingTemplates.delete(templateId);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Failed to queue PDF generation. Please try again.');
    // Restore button
    button.disabled = false;
    button.innerHTML = originalHtml;
    generatingTemplates.delete(templateId);
  });
  
  return false; // Prevent default link behavior
}

// Poll status for a specific template
function startStatusPolling(templateId) {
  const pollInterval = setInterval(() => {
    fetch(`/templates/${templateId}/pdf_status`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.json())
    .then(data => {
      updatePDFStatus(templateId, data);
      
      // Stop polling if completed or failed
      if (data.status === 'completed' || data.status === 'failed') {
        clearInterval(pollInterval);
        generatingTemplates.delete(templateId);
        
        // Update button
        const button = document.getElementById(`generate-btn-${templateId}`);
        if (button) {
          button.disabled = false;
          button.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            ${data.status === 'completed' ? 'Regenerate PDF' : 'Generate PDF'}
          `;
        }
        
        // Update View PDF button if completed
        if (data.status === 'completed' && data.pdf_id) {
          updateViewPDFButton(templateId, data.pdf_id);
        }
      }
    })
    .catch(error => {
      console.error('Status polling error:', error);
      clearInterval(pollInterval);
      generatingTemplates.delete(templateId);
    });
  }, 3000); // Poll every 3 seconds
}

function updatePDFStatus(templateId, pdfData) {
  const statusElement = document.getElementById(`pdf-status-${templateId}`);
  
  if (statusElement) {
    let statusHtml = '';
    switch(pdfData.status) {
      case 'completed':
        statusHtml = `
          <div class="flex items-center gap-2 text-sm">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-green-600 font-medium">PDF Ready</span>
            ${pdfData.completed_at ? `
              <span class="text-gray-400">•</span>
              <span class="text-gray-500">Generated ${timeAgo(pdfData.completed_at)} ago</span>
            ` : ''}
            ${pdfData.pdf_size ? `<span class="text-gray-400">•</span><span class="text-gray-500">${formatBytes(pdfData.pdf_size)}</span>` : ''}
          </div>
        `;
        break;
      case 'processing':
        statusHtml = `
          <div class="flex items-center gap-2 text-sm">
            <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
            <span class="text-blue-600 font-medium">Generating PDF...</span>
            ${pdfData.started_at ? `<span class="text-gray-400">•</span><span class="text-gray-500">Started ${timeAgo(pdfData.started_at)} ago</span>` : ''}
          </div>
        `;
        break;
      case 'pending':
        statusHtml = `
          <div class="flex items-center gap-2 text-sm">
            <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
            <span class="text-yellow-600 font-medium">Queued for generation</span>
            <span class="text-gray-400">•</span>
            <span class="text-gray-500">Position #${pdfData.queue_position}</span>
            ${pdfData.estimated_wait_time_human ? `<span class="text-gray-400">•</span><span class="text-gray-500">~${pdfData.estimated_wait_time_human} wait</span>` : ''}
          </div>
        `;
        break;
      case 'failed':
        statusHtml = `
          <div class="flex items-center gap-2 text-sm">
            <div class="w-2 h-2 bg-red-500 rounded-full"></div>
            <span class="text-red-600 font-medium">Generation Failed</span>
            <span class="text-gray-400">•</span>
            <span class="text-gray-500">${timeAgo(pdfData.updated_at)} ago</span>
          </div>
        `;
        break;
      default:
        statusHtml = `
          <div class="flex items-center gap-2 text-sm">
            <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
            <span class="text-gray-500">No PDF generated yet</span>
          </div>
        `;
    }
    statusElement.innerHTML = statusHtml;
  }
}

function updateViewPDFButton(templateId, pdfId) {
  // Find the PDF button container for this template
  const pdfActionsContainer = document.getElementById(`pdf-actions-${templateId}`);
  if (!pdfActionsContainer) return;
  
  // Check if there's a disabled placeholder button
  const placeholderButton = document.getElementById(`pdf-placeholder-${templateId}`);
  if (placeholderButton) {
    // Replace the disabled button with an active View PDF link
    const newButton = document.createElement('a');
    newButton.href = `/dashboard/template_pdfs/${pdfId}/preview`;
    newButton.className = 'btn btn-outline btn-warning btn-sm gap-2';
    newButton.target = '_blank';
    newButton.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
      </svg>
      View PDF
    `;
    placeholderButton.replaceWith(newButton);
  } else {
    // If there's already a View PDF button, just update its href
    const existingButton = pdfActionsContainer.querySelector('a[href*="preview_template_pdf"]');
    if (existingButton) {
      existingButton.href = `/dashboard/template_pdfs/${pdfId}/preview`;
    }
  }
}

// Helper functions
function timeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now - date) / 1000);
  
  if (seconds < 60) return `${seconds} seconds`;
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} minutes`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} hours`;
  const days = Math.floor(hours / 24);
  return `${days} days`;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// On page load, check for any templates that are currently generating
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[id^="pdf-status-"]').forEach(statusEl => {
    const templateId = statusEl.id.replace('pdf-status-', '');
    if (statusEl.textContent.includes('Generating') || statusEl.textContent.includes('Queued')) {
      startStatusPolling(templateId);
    }
  });
});
</script>
